<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    mc:Ignorable="d">

   <ResourceDictionary.MergedDictionaries>
      <ResourceDictionary Source="Shared.xaml" />
   </ResourceDictionary.MergedDictionaries>

   <!-- The Menu Bar itself -->
   <Style x:Key="{x:Type Menu}" TargetType="{x:Type Menu}">
      <Setter Property="OverridesDefaultStyle" Value="True" />
      <Setter Property="SnapsToDevicePixels" Value="True" />
      <Setter Property="Template">
         <Setter.Value>
            <ControlTemplate TargetType="{x:Type Menu}">
               <Border BorderThickness="2"
                       BorderBrush="{DynamicResource MenuBarBorder}"
                       Background="{DynamicResource MenuBarBackground}">
                  <StackPanel ClipToBounds="True" Orientation="Horizontal" IsItemsHost="True" />
               </Border>
            </ControlTemplate>
         </Setter.Value>
      </Setter>
   </Style>

   <!-- Top-level Menu items -->
   <ControlTemplate x:Key="{x:Static MenuItem.TopLevelHeaderTemplateKey}" TargetType="{x:Type MenuItem}">
      <Border x:Name="Border">
         <Grid>
            <ContentPresenter Margin="6,3,6,3" ContentSource="Header" RecognizesAccessKey="True" />
            <Popup x:Name="Popup"
                   Placement="Bottom"
                   IsOpen="{TemplateBinding IsSubmenuOpen}"
                   AllowsTransparency="True"
                   Focusable="False"
                   PopupAnimation="Fade">
               <Border x:Name="SubmenuBorder"
                       SnapsToDevicePixels="True"
                       BorderThickness="1"
                       Background="{DynamicResource PopupMenuBackground}"
                       BorderBrush="{DynamicResource PopupMenuBorder}">
                  <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
               </Border>
            </Popup>
         </Grid>
      </Border>
      <ControlTemplate.Triggers>
         <Trigger Property="IsSuspendingPopupAnimation" Value="true">
            <Setter TargetName="Popup" Property="PopupAnimation" Value="None" />
         </Trigger>
         <Trigger Property="IsHighlighted" Value="true">
            <Setter TargetName="Border" Property="BorderBrush" Value="Transparent" />
            <Setter Property="Background" TargetName="Border" Value="{DynamicResource MenuBarItemHighlighted}" />
         </Trigger>
         <Trigger Property="IsEnabled" Value="False">
            <Setter Property="Foreground" Value="{DynamicResource MenuItemDisabled}" />
         </Trigger>
      </ControlTemplate.Triggers>
   </ControlTemplate>

   <!-- Normal menu items -->
   <ControlTemplate x:Key="{x:Static MenuItem.SubmenuItemTemplateKey}" TargetType="{x:Type MenuItem}">
      <Border x:Name="Border" BorderThickness="1">
         <Grid Height="20">
            <Grid.ColumnDefinitions>
               <ColumnDefinition Width="Auto" SharedSizeGroup="Icon" />
               <ColumnDefinition Width="*" SharedSizeGroup="Content"/>
               <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut" />
               <ColumnDefinition Width="13" SharedSizeGroup="SubMenuArrow" />
            </Grid.ColumnDefinitions>
            <!-- The box in which the checkmark goes -->
            <Border x:Name="Check"
                    Grid.Column="0"
                    Width="13"
                    Height="13"
                    Visibility="Collapsed"
                    Margin="6,0,0,0"
                    BorderThickness="1"
                    BorderBrush="{DynamicResource MenuItemBorder}"
                    Background="{DynamicResource MenuItemCheckmarkBackground}">
               <Path x:Name="CheckMark"
                     Width="7"
                     Height="7"
                     Visibility="Hidden"
                     SnapsToDevicePixels="False"
                     StrokeThickness="2"
                     Stroke="{DynamicResource MenuItemGlyph}" 
                     Data="M 0 0 L 7 7 M 0 7 L 7 0"/>
            </Border>
            <!-- The MenuItem Text -->
            <ContentPresenter x:Name="HeaderHost"
                              Margin="6,0,0,0"
                              Grid.Column="1"
                              ContentSource="Header"
                              VerticalAlignment="Center"
                              RecognizesAccessKey="True" />
            <!-- Input Gesture Text -->
            <TextBlock x:Name="InputGestureText"
                       Grid.Column="2"
                       Text="{TemplateBinding InputGestureText}"
                       Margin="6,0,0,0"
                       VerticalAlignment="Center"
                       DockPanel.Dock="Right" />
         </Grid>
      </Border>
      <ControlTemplate.Triggers>
         <Trigger Property="ButtonBase.Command" Value="{x:Null}" />
         <Trigger Property="IsChecked" Value="true">
            <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
         </Trigger>
         <Trigger Property="IsCheckable" Value="true">
            <Setter TargetName="Check" Property="Visibility" Value="Visible" />
         </Trigger>
         <Trigger Property="IsHighlighted" Value="true">
            <Setter Property="Background" TargetName="Border" Value="{DynamicResource MenuItemHighlighted}" />
            <Setter Property="BorderBrush" TargetName="Border" Value="{DynamicResource MenuItemHighlightedBorder}" />
         </Trigger>
         <Trigger Property="IsEnabled" Value="false">
            <Setter Property="Foreground" Value="{DynamicResource MenuItemDisabledForeground}" />
         </Trigger>
      </ControlTemplate.Triggers>
   </ControlTemplate>

   <!-- MenuItems with Submenus -->
   <ControlTemplate x:Key="{x:Static MenuItem.SubmenuHeaderTemplateKey}" TargetType="{x:Type MenuItem}">
      <Border x:Name="Border" BorderThickness="1">
         <Grid Height="20">
            <Grid.ColumnDefinitions>
               <ColumnDefinition Width="Auto" SharedSizeGroup="Icon" />
               <ColumnDefinition Width="*" SharedSizeGroup="Content" />
               <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut" />
               <ColumnDefinition Width="13" SharedSizeGroup="SubMenuArrow" />
            </Grid.ColumnDefinitions>
            <ContentPresenter x:Name="Icon"
                          Margin="6,0,0,0"
                          VerticalAlignment="Center"
                          ContentSource="Icon" />
            <ContentPresenter x:Name="HeaderHost"
                          Grid.Column="1"
                          Margin="6,0,0,0"
                          ContentSource="Header"
                          VerticalAlignment="Center"
                          RecognizesAccessKey="True" />
            <TextBlock x:Name="InputGestureText"
                       Grid.Column="2"
                       Text="{TemplateBinding InputGestureText}"
                       Margin="6,0,0,0"
                       DockPanel.Dock="Right" />
            <Path Grid.Column="3"
                  HorizontalAlignment="Center"
                  VerticalAlignment="Center"
                  Fill="{DynamicResource SubmenuArrowFill}"
                  Data="M 0 0 L 0 7 L 4 3.5 Z" />
            <Popup x:Name="Popup"
                   Placement="Right"
                   HorizontalOffset="1"
                   VerticalOffset="-5"
                   IsOpen="{TemplateBinding IsSubmenuOpen}"
                   AllowsTransparency="True"
                   Focusable="False"
                   PopupAnimation="Fade">
               <Border x:Name="SubmenuBorder"
                       SnapsToDevicePixels="True"
                       BorderThickness="1"
                       BorderBrush="{DynamicResource PopupMenuBorder}"
                       Background="{DynamicResource PopupMenuBackground}">
                  <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
               </Border>
            </Popup>
         </Grid>
      </Border>
      <ControlTemplate.Triggers>
         <Trigger Property="Icon" Value="{x:Null}">
            <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
         </Trigger>
         <Trigger Property="IsHighlighted" Value="true">
            <Setter Property="Background" TargetName="Border" Value="{DynamicResource MenuItemHighlighted}" />
            <Setter Property="BorderBrush" TargetName="Border" Value="{DynamicResource MenuItemHighlightedBorder}" />
         </Trigger>
         <Trigger SourceName="Popup" Property="AllowsTransparency" Value="True">
            <Setter TargetName="SubmenuBorder" Property="Padding" Value="0,3,0,3" />
         </Trigger>
         <Trigger Property="IsEnabled" Value="false">
            <Setter Property="Foreground" Value="{DynamicResource MenuItemDisabledForeground}" />
         </Trigger>
      </ControlTemplate.Triggers>
   </ControlTemplate>

   <!-- Context menus -->
   <Style TargetType="{x:Type ContextMenu}">
      <Setter Property="SnapsToDevicePixels" Value="True" />
      <Setter Property="OverridesDefaultStyle" Value="True" />
      <Setter Property="Grid.IsSharedSizeScope" Value="true" />
      <Setter Property="HasDropShadow" Value="True" />
      <Setter Property="Template">
         <Setter.Value>
            <ControlTemplate TargetType="{x:Type ContextMenu}">
               <Border x:Name="Border"
                       BorderThickness="1"
                       BorderBrush="{DynamicResource PopupMenuBorder}"
                       Background="{DynamicResource PopupMenuBackground}">
                  <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
               </Border>
               <ControlTemplate.Triggers>
                  <Trigger Property="HasDropShadow" Value="true">
                     <Setter TargetName="Border" Property="Padding" Value="0,3,0,3" />
                  </Trigger>
               </ControlTemplate.Triggers>
            </ControlTemplate>
         </Setter.Value>
      </Setter>
   </Style>

   <Geometry x:Key="DownArrow">M 0,0 L 3.5,4 L 7,0 Z</Geometry>
   <Geometry x:Key="UpArrow">M 0,4 L 3.5,0 L 7,4 Z</Geometry>
   <Geometry x:Key="RightArrow">M 0,0 L 4,3.5 L 0,7 Z</Geometry>

   <!-- MenuItem Separators -->
   <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" TargetType="{x:Type Separator}">
      <Setter Property="Height" Value="1" />
      <Setter Property="Margin" Value="0,3,0,3" />
      <Setter Property="Template">
         <Setter.Value>
            <ControlTemplate TargetType="{x:Type Separator}">
               <Border BorderThickness="1"
                       BorderBrush="{DynamicResource MenuItemSeparator}" />
            </ControlTemplate>
         </Setter.Value>
      </Setter>
   </Style>

   <!-- MenuItem Style -->
   <Style x:Key="{x:Type MenuItem}" TargetType="{x:Type MenuItem}">
      <Setter Property="OverridesDefaultStyle" Value="True" />
      <Style.Triggers>
         <Trigger Property="Role" Value="TopLevelHeader">
            <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.TopLevelHeaderTemplateKey}}" />
            <Setter Property="Grid.IsSharedSizeScope" Value="true" />
         </Trigger>
         <Trigger Property="Role" Value="TopLevelItem">
            <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.TopLevelItemTemplateKey}}" />
         </Trigger>
         <Trigger Property="Role" Value="SubmenuHeader">
            <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.SubmenuHeaderTemplateKey}}" />
         </Trigger>
         <Trigger Property="Role" Value="SubmenuItem">
            <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.SubmenuItemTemplateKey}}" />
         </Trigger>
      </Style.Triggers>
   </Style>
   <!--</SnippetMenuItem>-->
</ResourceDictionary>